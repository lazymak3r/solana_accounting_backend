version: '3.9'

volumes:
  neo4j_data:
  kafka_data:

services:

  api:
    image: ghcr.io/mfactory-lab/accounting_api
    restart: always
    env_file:
      - .env
    ports:
      - "3000:3000"
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.http.routers.api.middlewares=bacc-header
      - traefik.http.middlewares.bacc-header.headers.customResponseHeaders.X-Powered-By=bacc.one
      - traefik.http.routers.api.rule=Host(`api.bacc.one`)
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.tls.certresolver=myresolver

  collector:
    image: ghcr.io/mfactory-lab/accounting_collector
    restart: always
    env_file:
      - .env
    labels:
      - com.centurylinklabs.watchtower.enable=true
    deploy:
      replicas: 3

  keeper:
    image: ghcr.io/mfactory-lab/accounting_keeper
    restart: always
    env_file:
      - .env
    labels:
      - com.centurylinklabs.watchtower.enable=true
    deploy:
      replicas: 3

  neo4j:
    image: neo4j
    restart: always
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    environment:
      - NEO4J_AUTH=neo4j/frYigdzlBLnmVNMmkbcKZg11Dc1h_vptRDsLJwr3Umc
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      # Raise memory limits
      - NEO4J_server.memory.pagecache.size=1G
      - NEO4J_server.memory.heap.initial_size=1G
      - NEO4J_server_memory_heap_max__size=1G
      - NEO4JLABS_PLUGINS=["apoc"]
    healthcheck:
      test: wget http://localhost:7474 || exit 1
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 40s

  # kafka-ui:
  #   image: provectuslabs/kafka-ui
  #   container_name: kafka-ui
  #   ports:
  #     - "8081:8080"
  #   restart: always
  #   environment:
  #     - KAFKA_CLUSTERS_0_NAME=local
  #     - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
  #     - KAFKA_CLUSTERS_0_ZOOKEEPER=kafka:2181

  kafka:
    image: bitnami/kafka:3.3
    ports:
      - '9092:9092'
    restart: always
    environment:
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_BROKER_ID: 1
      # KAFKA_CFG_NUM_PARTITIONS: 10
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: yes
      KAFKA_CFG_PROCESS_ROLES: broker,controller

      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER

      KAFKA_CFG_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://kafka:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      # KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092

      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      # KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      # KAFKA_KRAFT_CLUSTER_ID: Q1I8kE_MT2SN5xuTHo43XA
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_CFG_OFFSETS_TOPIC_NUM_PARTITIONS: 10
      # BITNAMI_DEBUG: true
    volumes:
      - kafka_data:/bitnami/kafka

  # Kafka UI
  # See: https://hub.docker.com/r/rsmnarts/kowl
  kafka-ui:
    image: rsmnarts/kowl:latest
    environment:
      KAFKA_BROKERS: 'kafka:29092'
    restart: 'on-failure'
    ports:
      - '9000:8080'
    depends_on:
      - kafka

  # kafdrop:
  #   image: obsidiandynamics/kafdrop
  #   restart: always
  #   ports:
  #     - "9000:9000"
  #   environment:
  #     KAFKA_BROKERCONNECT: "kafka:29092"
  #     JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
  #   depends_on:
  #     - kafka

  # kafka:
  #   image: obsidiandynamics/kafka
  #   restart: always
  #   # ports:
  #   #   - "2181:2181"
  #   #   - "9092:9092"
  #   environment:
  #     KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
  #     KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
  #     KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
  #     KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
  #     KAFKA_RESTART_ATTEMPTS: "10"
  #     KAFKA_RESTART_DELAY: "5"
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     # ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"

  traefik:
    image: "traefik:v2.7"
    restart: always
    security_opt:
      - no-new-privileges:true
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=vk.tiamo@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  watchtower:
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.docker/config.json:/config.json
      - /etc/timezone:/etc/timezone:ro
    # command: --interval 30 --debug true --cleanup true containernames
    environment:
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_NO_STARTUP_MESSAGE=true
      - WATCHTOWER_POLL_INTERVAL=30
      - WATCHTOWER_LIFECYCLE_HOOKS=1
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=telegram://$TELEGRAM_TOKEN@telegram/?channels=$TELEGRAM_CHAT_ID
